{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\Works\\\\NewsApp\\\\newApp\\\\src\\\\something\\\\cards.jsx\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nexport var Cards = function Cards() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      data = _useState4[0],\n      setData = _useState4[1];\n\n  var getMovies = function getMovies() {\n    var url, response, success, json, message, status;\n    return _regeneratorRuntime.async(function getMovies$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            url = 'https://reactnative.dev/movies.json';\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(RFHttp().url(url).execute('GET'));\n\n          case 4:\n            response = _context.sent;\n            success = response.success, json = response.json, message = response.message, status = response.status;\n            setData(json.movies);\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(_context.t0);\n\n          case 12:\n            _context.prev = 12;\n            setLoading(false);\n            return _context.finish(12);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 9, 12, 15]], Promise);\n  };\n\n  useEffect(function () {\n    getMovies();\n  }, []);\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      padding: 24\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, isLoading ? React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 22\n    }\n  }, \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445\") : React.createElement(FlatList, {\n    data: data,\n    keyExtractor: function keyExtractor(_ref, index) {\n      var id = _ref.id;\n      return id;\n    },\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(Text, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 15\n        }\n      }, item.title, \", \", item.releaseYear);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }\n  }));\n};","map":{"version":3,"sources":["E:/Works/NewsApp/newApp/src/something/cards.jsx"],"names":["React","useState","useEffect","Cards","isLoading","setLoading","data","setData","getMovies","url","RFHttp","execute","response","success","json","message","status","movies","console","error","flex","padding","index","id","item","title","releaseYear"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAA0C,OAA1C;;;;;;;AAOA,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ,GAAM;AACvB,kBAAgCF,QAAQ,CAAC,IAAD,CAAxC;AAAA;AAAA,MAAOG,SAAP;AAAA,MAAkBC,UAAlB;;AACA,mBAAwBJ,QAAQ,CAAC,EAAD,CAAhC;AAAA;AAAA,MAAOK,IAAP;AAAA,MAAaC,OAAb;;AAEA,MAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGRC,YAAAA,GAHQ,GAGF,qCAHE;AAAA;AAAA,6CAKSC,MAAM,GAAGD,GAAT,CAAaA,GAAb,EAAkBE,OAAlB,CAA0B,KAA1B,CALT;;AAAA;AAKRC,YAAAA,QALQ;AAMPC,YAAAA,OANO,GAM2BD,QAN3B,CAMPC,OANO,EAMEC,IANF,GAM2BF,QAN3B,CAMEE,IANF,EAMQC,OANR,GAM2BH,QAN3B,CAMQG,OANR,EAMiBC,MANjB,GAM2BJ,QAN3B,CAMiBI,MANjB;AAOdT,YAAAA,OAAO,CAACO,IAAI,CAACG,MAAN,CAAP;AAPc;AAAA;;AAAA;AAAA;AAAA;AASdC,YAAAA,OAAO,CAACC,KAAR;;AATc;AAAA;AAWdd,YAAAA,UAAU,CAAC,KAAD,CAAV;AAXc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAeAH,EAAAA,SAAS,CAAC,YAAM;AACdM,IAAAA,SAAS;AACV,GAFQ,EAEN,EAFM,CAAT;AAIA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEY,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,OAAO,EAAE;AAApB,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGjB,SAAS,GAAG,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6FAAH,GACR,oBAAC,QAAD;AACE,IAAA,IAAI,EAAEE,IADR;AAEE,IAAA,YAAY,EAAE,4BAASgB,KAAT;AAAA,UAAGC,EAAH,QAAGA,EAAH;AAAA,aAAmBA,EAAnB;AAAA,KAFhB;AAGE,IAAA,UAAU,EAAE;AAAA,UAAGC,IAAH,SAAGA,IAAH;AAAA,aACV,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOA,IAAI,CAACC,KAAZ,QAAqBD,IAAI,CAACE,WAA1B,CADU;AAAA,KAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADF;AAaH,CApCM","sourcesContent":["import React, {useState, useEffect } from 'react'\r\n//import {useDispatch, useSelector} from 'react-redux'\r\nimport { View, Text, Button, Image ,FlatList, ActivityIndicator } from 'react-native';\r\n//import { Api } from '../Api/Api';\r\n//import { loadnews } from '../Reducer/SearchReducer';\r\n//import {Card} from './card'\r\n//import axios from 'axios';\r\nexport const Cards = () => {\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [data, setData] = useState([]);\r\n  \r\n    const getMovies = async () => {\r\n       try {\r\n        //const response = await fetch('https://reactnative.dev/movies.json');\r\n        const url = 'https://reactnative.dev/movies.json'\r\n        //const json = await response.json();\r\n        const response = await RFHttp().url(url).execute('GET');\r\n        const {success, json, message, status} = response;\r\n        setData(json.movies);\r\n      } catch (error) {\r\n        console.error(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n  \r\n    useEffect(() => {\r\n      getMovies();\r\n    }, []);\r\n  \r\n    return (\r\n      <View style={{ flex: 1, padding: 24 }}>\r\n        {isLoading ? <Text>Загрузка данных</Text> : (\r\n          <FlatList\r\n            data={data}\r\n            keyExtractor={({ id }, index) => id}\r\n            renderItem={({ item }) => (\r\n              <Text>{item.title}, {item.releaseYear}</Text>\r\n            )}\r\n          />\r\n        )}\r\n      </View>\r\n    );\r\n}\r\n\r\n\r\n\r\n "]},"metadata":{},"sourceType":"module"}